package main

import (
	"fmt"
	"sort"
)

type producto struct {
	nombre   string
	cantidad int
	precio   int
}
type listaProductos []producto

var lProductos listaProductos

const existenciaMinima int = 10 //la existencia mínima es el número mínimo debajo de el cual se deben tomar eventuales desiciones

func (l *listaProductos) agregarProducto(nombre string, cantidad int, precio int) {
	var search = l.buscarProducto(nombre)
	if search != -1 {
		(*l)[search].cantidad = (*l)[search].cantidad + cantidad
		if (*l)[search].precio != precio {
			(*l)[search].precio = precio
		}
	}
	*l = append(*l, producto{nombre: nombre, cantidad: cantidad, precio: precio})
	// modificar el código para que cuando se agregue un producto, si este ya se encuentra, incrementar la cantidad
	// de elementos del producto y eventualmente el precio si es que es diferente
}

func (l *listaProductos) buscarProducto(nombre string) int { //el retorno es el índice del producto encontrado y -1 si no existe
	var result = -1
	var i int
	for i = 0; i < len(*l); i++ {
		if (*l)[i].nombre == nombre {
			result = i
		}
	}
	return result
}

func (l *listaProductos) venderProducto(nombre string, cant int) {
	var prod = l.buscarProducto(nombre)
	if prod != -1 {
		if cant > (*l)[prod].cantidad {
			fmt.Println("Cantidad no disponible, disponemos de ", (*l)[prod].cantidad, " productos")
		} else if (*l)[prod].cantidad == cant {
			almacena := (*l)[prod].nombre
			(*l) = append((*l)[:prod], (*l)[prod+1:]...)
			fmt.Printf("Producto: %s eliminado... \n", almacena)
		} else {
			(*l)[prod].cantidad = (*l)[prod].cantidad - cant
		}
		//modificar para que cuando no haya existencia de cantidad de productos, el producto se elimine de "la lista" y notificar
	}
}

func (l *listaProductos) aumentarInventarioDeMinimos() {
	var saveProd string
	var saveCant int
	var newCant int

	for i := 0; i < len((*l)); i++ {
		//fmt.Println(v)
		if (*l)[i].cantidad < existenciaMinima {
			saveProd = (*l)[i].nombre
			saveCant = (*l)[i].cantidad
			(*l)[i].cantidad += existenciaMinima - (*l)[i].cantidad
			newCant = (*l)[i].cantidad
			fmt.Println("Aumentado con exito ", saveProd, " Cantidad anterior: ", saveCant, " Nueva cantidad: ", newCant)
		}
	}
}

func (l *listaProductos) listarProductosMínimos() listaProductos {
	var temp listaProductos
	for i := 0; i < len(*l); i++ {
		if (*l)[i].cantidad < existenciaMinima {
			temp = append(temp, (*l)[i])
			fmt.Println(temp)
		}
	}
	return temp
}

func llenarDatos() {
	lProductos.agregarProducto("arroz", 5, 2500)
	lProductos.agregarProducto("frijoles", 4, 2000)
	lProductos.agregarProducto("leche", 14, 1200)
	lProductos.agregarProducto("sal", 5, 4560)
	lProductos.agregarProducto("azucar", 6, 2500)
	lProductos.agregarProducto("aceite", 12, 3500)

}

func (l *listaProductos) ordenarList() listaProductos {

	sort.Slice((*l)[:], func(i, j int) bool {
		return (*l)[i].nombre < (*l)[j].nombre
	})
	return (*l)

}

func main() {
	fmt.Println("Llenando lista....")
	llenarDatos()
	fmt.Println("Lista cargada...")
	fmt.Println(lProductos)

	fmt.Println("Producto que va a ser eliminado...")
	lProductos.venderProducto("arroz", 4)
	fmt.Println(lProductos)

	fmt.Println("Imprimiendo lista ordenada")
	lProductos.ordenarList()
	fmt.Println(lProductos)

	fmt.Println("Aumentando inventario de productos por debajo de existencia minima(10)")
	lProductos2 := lProductos.listarProductosMínimos() //lista de productos minimos
	lProductos2.aumentarInventarioDeMinimos()
	fmt.Println(lProductos2)

}
